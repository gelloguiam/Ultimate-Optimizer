plot(f1(2))
f1 = function(x) 2*x + x*x
plot(f1(2))
f1 = function(x) 2*x + 23/x
plot(f1(2))
f1 = function(x) 2*x + 2
plot(f1(2))
f1 = function(x) 2*x*x + 2
plot(f1(2))
#Author: Angelo C. Guiam
#Date Created: November 04, 2015
MullerMethod = function(f, x0, x1, x2, macheps, max, verbose=TRUE) {
ea = 100;
counter = 1;
given_x0 = x0;
given_x1 = x1;
given_x2 = x2;
while(ea >= macheps && counter != max) { #stopping criteria
y0 = f(x0); #get function values
y1 = f(x1);
y2 = f(x2);
#solve using the formula
h0 = x1-x0;
h1 = x2-x1;
d0 = (f(x1)-f(x0))/h0;
d1 = (f(x2)-f(x1))/h1;
A = (d1-d0)/(h1+h0);
B = A*h1 + d1;
C = f(x2);
#set the sign based on the value of determinants
if (abs(B - sqrt(B*B - 4*A*C)) < abs(B + sqrt(B*B - 4*A*C))) {
sign = TRUE
} else {
sign = FALSE;
}
if(sign) { #if positive, use positive form
x3 = x2 - ((2*C)/(B+sqrt(B*B-4*A*C)))
} else { #use negative form otherwise
x3 = x2 - ((2*C)/(B-sqrt(B*B-4*A*C)))
}
ea = abs((x3-x2)/x3) * 100; #solve for the error
if(verbose) { #if TRUE, print the process
cat("ITERATION #", counter,"\n");
cat("x0 = ",x0,"\n");
cat("f(x0) = ",f(x0),"\n");
cat("x1 = ",x1,"\n");
cat("f(x1) = ",f(x1),"\n");
cat("x2 = ",x2,"\n");
cat("f(x2) = ",f(x2),"\n");
cat("x3 = ",x3,"\n");
cat("f(x3) = ",f(x3),"\n");
cat("EA = ",ea,"\n\n");
}
x0 = x1; #update the values
x1 = x2;
x2 = x3;
counter = counter+1;
}
#setup the result
result = list(f = f, given_x0 = given_x0,
given_x1 = given_x1, given_x2 = given_x2,
x3 = x3, iterations = counter, ea = ea);
return(result); #return result in list
}
a = function(x) tan(x) - x - 1
a
plot(a)
result2 = MullersMethod(a,0,0.2,0.4,0.00001,100000)
result2 = MullerMethod(a,0,0.2,0.4,0.00001,100000)
plot(f, xlim=c(0,200))
plot(f, xlim=c(0,3))
plot(f, xlim=c(0,10))
result2 = MullerMethod(f,0,2,4,0.00001,100000)
f(4.71239)
f
cos(4.71239)
plot(cos(4.712))
f1 = function(x) tan(X) - x - 1
plot(f1)
plot(f1(2))
f1 = function(x) tan(x) - x - 1
plot(f1(2))
plot(f1)
#Author: Angelo C. Guiam
#Date Created: November 04, 2015
MullerMethod = function(f, x0, x1, x2, macheps, max, verbose=TRUE) {
ea = 100;
counter = 1;
given_x0 = x0;
given_x1 = x1;
given_x2 = x2;
while(ea >= macheps && counter != max) { #stopping criteria
y0 = f(x0); #get function values
y1 = f(x1);
y2 = f(x2);
#solve using the formula
h0 = x1-x0;
h1 = x2-x1;
d0 = (f(x1)-f(x0))/h0;
d1 = (f(x2)-f(x1))/h1;
A = (d1-d0)/(h1+h0);
B = A*h1 + d1;
C = f(x2);
#set the sign based on the value of determinants
if (abs(B - sqrt(B*B - 4*A*C)) < abs(B + sqrt(B*B - 4*A*C))) {
sign = TRUE
} else {
sign = FALSE;
}
if(sign) { #if positive, use positive form
x3 = x2 - ((2*C)/(B+sqrt(B*B-4*A*C)))
} else { #use negative form otherwise
x3 = x2 - ((2*C)/(B-sqrt(B*B-4*A*C)))
}
ea = abs((x3-x2)/x3) * 100; #solve for the error
if(verbose) { #if TRUE, print the process
cat("ITERATION #", counter,"\n");
cat("x0 = ",x0,"\n");
cat("f(x0) = ",f(x0),"\n");
cat("x1 = ",x1,"\n");
cat("f(x1) = ",f(x1),"\n");
cat("x2 = ",x2,"\n");
cat("f(x2) = ",f(x2),"\n");
cat("x3 = ",x3,"\n");
cat("f(x3) = ",f(x3),"\n");
cat("EA = ",ea,"\n\n");
}
x0 = x1; #update the values
x1 = x2;
x2 = x3;
counter = counter+1;
}
#setup the result
result = list(f = f, given_x0 = given_x0,
given_x1 = given_x1, given_x2 = given_x2,
x3 = x3, iterations = counter, ea = ea);
return(result); #return result in list
}
result = MullerMethod(f1,-2,-1,0,0.00000001,,100000)
result = MullerMethod(f1,-2,-1,0,0.00000001,100000)
result = MullerMethod(f1,-1,0,1,0.00000001,,100000)
result = MullerMethod(f1,-1,0,1,0.00000001,100000)
result = MullerMethod(f1,1,2,3,0.00000001,100000)
sqrt(as.complex(-1))
#Author: Angelo C. Guiam
#Date Created: November 04, 2015
MullerMethod = function(f, x0, x1, x2, macheps, max, verbose=TRUE) {
ea = 100;
counter = 1;
given_x0 = x0;
given_x1 = x1;
given_x2 = x2;
while(ea >= macheps && counter != max) { #stopping criteria
y0 = f(x0); #get function values
y1 = f(x1);
y2 = f(x2);
#solve using the formula
h0 = x1-x0;
h1 = x2-x1;
d0 = (f(x1)-f(x0))/h0;
d1 = (f(x2)-f(x1))/h1;
A = (d1-d0)/(h1+h0);
B = A*h1 + d1;
C = f(x2);
#set the sign based on the value of determinants
if (abs(B - sqrt(as.complex(B*B - 4*A*C))) < abs(as.complex(B + sqrt(B*B - 4*A*C)))) {
sign = TRUE
} else {
sign = FALSE;
}
if(sign) { #if positive, use positive form
x3 = x2 - ((2*C)/(B+sqrt(as.complex(B*B-4*A*C))))
} else { #use negative form otherwise
x3 = x2 - ((2*C)/(B-sqrt(as.complex(B*B-4*A*C))))
}
ea = abs((x3-x2)/x3) * 100; #solve for the error
if(verbose) { #if TRUE, print the process
cat("ITERATION #", counter,"\n");
cat("x0 = ",x0,"\n");
cat("f(x0) = ",f(x0),"\n");
cat("x1 = ",x1,"\n");
cat("f(x1) = ",f(x1),"\n");
cat("x2 = ",x2,"\n");
cat("f(x2) = ",f(x2),"\n");
cat("x3 = ",x3,"\n");
cat("f(x3) = ",f(x3),"\n");
cat("EA = ",ea,"\n\n");
}
x0 = x1; #update the values
x1 = x2;
x2 = x3;
counter = counter+1;
}
#setup the result
result = list(f = f, given_x0 = given_x0,
given_x1 = given_x1, given_x2 = given_x2,
x3 = x3, iterations = counter, ea = ea);
return(result); #return result in list
}
result = MullerMethod(f1,1,2,3,0.00000001,100000)
f
f = function(x) cos(x)
result0 = MullerMethod(f,0,2,4,0.00001,100000)
#Author: Angelo C. Guiam
#Date Created: November 04, 2015
MullerMethod = function(f, x0, x1, x2, macheps, max, verbose=TRUE) {
ea = 100;
counter = 1;
given_x0 = x0;
given_x1 = x1;
given_x2 = x2;
while(ea >= macheps && counter != max) { #stopping criteria
y0 = f(x0); #get function values
y1 = f(x1);
y2 = f(x2);
#solve using the formula
h0 = x1-x0;
h1 = x2-x1;
d0 = (f(x1)-f(x0))/h0;
d1 = (f(x2)-f(x1))/h1;
A = (d1-d0)/(h1+h0);
B = A*h1 + d1;
C = f(x2);
#set the sign based on the value of determinants
if (abs(B - sqrt(as.complex(B*B - 4*A*C))) < abs(as.complex(B + sqrt(B*B - 4*A*C)))) {
sign = TRUE
} else {
sign = FALSE;
}
if(sign) { #if positive, use positive form
x3 = x2 - ((2*C)/(B+sqrt(as.complex(B*B-4*A*C))))
} else { #use negative form otherwise
x3 = x2 - ((2*C)/(B-sqrt(as.complex(B*B-4*A*C))))
}
ea = abs((x3-x2)/x3) * 100; #solve for the error
if(verbose) { #if TRUE, print the process
cat("ITERATION #", counter,"\n");
cat("x0 = ",x0,"\n");
cat("f(x0) = ",f(x0),"\n");
cat("x1 = ",x1,"\n");
cat("f(x1) = ",f(x1),"\n");
cat("x2 = ",x2,"\n");
cat("f(x2) = ",f(x2),"\n");
cat("x3 = ",x3,"\n");
cat("f(x3) = ",f(x3),"\n");
cat("EA = ",ea,"\n\n");
}
x0 = x1; #update the values
x1 = x2;
x2 = x3;
counter = counter+1;
}
#setup the result
result = list(f = f, given_x0 = given_x0,
given_x1 = given_x1, given_x2 = given_x2,
x3 = x3, iterations = counter, ea = ea);
return(result); #return result in list
}
#Author: Angelo C. Guiam
#Date Created: November 04, 2015
MullerMethod = function(f, x0, x1, x2, macheps, max, verbose=TRUE) {
options(digits=22);
ea = 100;
counter = 1;
given_x0 = x0;
given_x1 = x1;
given_x2 = x2;
while(ea >= macheps && counter != max) { #stopping criteria
y0 = f(x0); #get function values
y1 = f(x1);
y2 = f(x2);
#solve using the formula
h0 = x1-x0;
h1 = x2-x1;
d0 = (f(x1)-f(x0))/h0;
d1 = (f(x2)-f(x1))/h1;
A = (d1-d0)/(h1+h0);
B = A*h1 + d1;
C = f(x2);
#set the sign based on the value of determinants
if (abs(B - sqrt(as.complex(B*B - 4*A*C))) < abs(as.complex(B + sqrt(B*B - 4*A*C)))) {
sign = TRUE
} else {
sign = FALSE;
}
if(sign) { #if positive, use positive form
x3 = x2 - ((2*C)/(B+sqrt(as.complex(B*B-4*A*C))))
} else { #use negative form otherwise
x3 = x2 - ((2*C)/(B-sqrt(as.complex(B*B-4*A*C))))
}
ea = abs((x3-x2)/x3) * 100; #solve for the error
if(verbose) { #if TRUE, print the process
cat("ITERATION #", counter,"\n");
cat("x0 = ",x0,"\n");
cat("f(x0) = ",f(x0),"\n");
cat("x1 = ",x1,"\n");
cat("f(x1) = ",f(x1),"\n");
cat("x2 = ",x2,"\n");
cat("f(x2) = ",f(x2),"\n");
cat("x3 = ",x3,"\n");
cat("f(x3) = ",f(x3),"\n");
cat("EA = ",ea,"\n\n");
}
x0 = x1; #update the values
x1 = x2;
x2 = x3;
counter = counter+1;
}
#setup the result
result = list(f = f, given_x0 = given_x0,
given_x1 = given_x1, given_x2 = given_x2,
x3 = x3, iterations = counter, ea = ea);
return(result); #return result in list
}
result = MullerMethod(f1,0,1,2,0.00000001,100000)
#Author: Angelo C. Guiam
#Date Created: November 04, 2015
MullerMethod = function(f, x0, x1, x2, macheps, max, verbose=TRUE) {
options(digits=22);
ea = 100;
counter = 1;
given_x0 = x0;
given_x1 = x1;
given_x2 = x2;
while(ea >= macheps && counter != max) { #stopping criteria
y0 = f(x0); #get function values
y1 = f(x1);
y2 = f(x2);
#solve using the formula
h0 = x1-x0;
h1 = x2-x1;
d0 = (f(x1)-f(x0))/h0;
d1 = (f(x2)-f(x1))/h1;
A = (d1-d0)/(h1+h0);
B = A*h1 + d1;
C = f(x2);
#set the sign based on the value of determinants
if (abs(B - sqrt(as.complex(B*B - 4*A*C))) < abs(B + sqrt(as.complex(B*B - 4*A*C)))) {
sign = TRUE
} else {
sign = FALSE;
}
if(sign) { #if positive, use positive form
x3 = x2 - ((2*C)/(B+sqrt(as.complex(B*B-4*A*C))))
} else { #use negative form otherwise
x3 = x2 - ((2*C)/(B-sqrt(as.complex(B*B-4*A*C))))
}
ea = abs((x3-x2)/x3) * 100; #solve for the error
if(verbose) { #if TRUE, print the process
cat("ITERATION #", counter,"\n");
cat("x0 = ",x0,"\n");
cat("f(x0) = ",f(x0),"\n");
cat("x1 = ",x1,"\n");
cat("f(x1) = ",f(x1),"\n");
cat("x2 = ",x2,"\n");
cat("f(x2) = ",f(x2),"\n");
cat("x3 = ",x3,"\n");
cat("f(x3) = ",f(x3),"\n");
cat("EA = ",ea,"\n\n");
}
x0 = x1; #update the values
x1 = x2;
x2 = x3;
counter = counter+1;
}
#setup the result
result = list(f = f, given_x0 = given_x0,
given_x1 = given_x1, given_x2 = given_x2,
x3 = x3, iterations = counter, ea = ea);
return(result); #return result in list
}
result = MullerMethod(f1,0,1,2,0.00000001,100000)
source('C:/Users/Gello Capa Guiam/Desktop/guiam_exer10.r')
#Author: Angelo C. Guiam
#Date Created: November 04, 2015
MullerMethod = function(f, x0, x1, x2, macheps, max, verbose=TRUE) {
ea = 100;
counter = 1;
given_x0 = x0;
given_x1 = x1;
given_x2 = x2;
while(ea >= macheps && counter != max) { #stopping criteria
y0 = f(x0); #get function values
y1 = f(x1);
y2 = f(x2);
#solve using the formula
h0 = x1-x0;
h1 = x2-x1;
d0 = (f(x1)-f(x0))/h0;
d1 = (f(x2)-f(x1))/h1;
A = (d1-d0)/(h1+h0);
B = A*h1 + d1;
C = f(x2);
#set the sign based on the value of determinants
if (abs(B - sqrt(B*B - 4*A*C)) < abs(B + sqrt(B*B - 4*A*C))) {
sign = TRUE
} else {
sign = FALSE;
}
if(sign) { #if positive, use positive form
x3 = x2 - ((2*C)/(B+sqrt(B*B-4*A*C)))
} else { #use negative form otherwise
x3 = x2 - ((2*C)/(B-sqrt(B*B-4*A*C)))
}
ea = abs((x3-x2)/x3) * 100; #solve for the error
if(verbose) { #if TRUE, print the process
cat("ITERATION #", counter,"\n");
cat("x0 = ",x0,"\n");
cat("f(x0) = ",f(x0),"\n");
cat("x1 = ",x1,"\n");
cat("f(x1) = ",f(x1),"\n");
cat("x2 = ",x2,"\n");
cat("f(x2) = ",f(x2),"\n");
cat("x3 = ",x3,"\n");
cat("f(x3) = ",f(x3),"\n");
cat("EA = ",ea,"\n\n");
}
x0 = x1; #update the values
x1 = x2;
x2 = x3;
counter = counter+1;
}
#setup the result
result = list(f = f, given_x0 = given_x0,
given_x1 = given_x1, given_x2 = given_x2,
x3 = x3, iterations = counter, ea = ea);
return(result); #return result in list
}
f1
result = MullerMethod(f1, 0, 0.5, 1, 0.000000001, 100000)
result = MullerMethod(f1, 0, 0.5, 1, 0.000000001, 100000)
f1
result
#Author: Angelo C. Guiam
#Date Created: November 04, 2015
MullerMethod = function(f, x0, x1, x2, macheps, max, verbose=TRUE) {
ea = 100;
counter = 1;
given_x0 = x0;
given_x1 = x1;
given_x2 = x2;
while(ea >= macheps && counter != max) { #stopping criteria
y0 = f(x0); #get function values
y1 = f(x1);
y2 = f(x2);
#solve using the formula
h0 = x1-x0;
h1 = x2-x1;
d0 = (f(x1)-f(x0))/h0;
d1 = (f(x2)-f(x1))/h1;
A = (d1-d0)/(h1+h0);
B = A*h1 + d1;
C = f(x2);
#set the sign based on the value of determinants
if (abs(B - sqrt(B*B - 4*A*C)) < abs(B + sqrt(B*B - 4*A*C))) {
sign = TRUE
} else {
sign = FALSE;
}
if(sign) { #if positive, use positive form
x3 = x2 - ((2*C)/(B+sqrt(B*B-4*A*C)))
} else { #use negative form otherwise
x3 = x2 - ((2*C)/(B-sqrt(B*B-4*A*C)))
}
ea = abs((x3-x2)/x3) * 100; #solve for the error
if(verbose) { #if TRUE, print the process
cat("ITERATION #", counter,"\n");
cat("x0 = ",x0,"\n");
cat("f(x0) = ",f(x0),"\n");
cat("x1 = ",x1,"\n");
cat("f(x1) = ",f(x1),"\n");
cat("x2 = ",x2,"\n");
cat("f(x2) = ",f(x2),"\n");
cat("x3 = ",x3,"\n");
cat("f(x3) = ",f(x3),"\n");
cat("EA = ",ea,"\n\n");
}
x0 = x1; #update the values
x1 = x2;
x2 = x3;
counter = counter+1;
}
#setup the result
result = list(f = f, given_x0 = given_x0,
given_x1 = given_x1, given_x2 = given_x2,
x3 = x3, iterations = (counter-1), ea = ea);
return(result); #return result in list
}
result = MullerMethod(f1, 0, 0.5, 1, 0.000000001, 100000)
result
f
result = MullerMethod(f, 1, 2, 4, 0.00001, 100000)
result
result = MullerMethod(f, 0, 2, 4, 0.00001, 100000)
result = MullerMethod(f1, 0, 0.5, 1, 0.000000001, 100000)
result
a = function(x) x * x * x - 13 * x - 12
a(2)
a(4.5)
a(5.5)
a(5)
a(6.024)
a(3.97648)
setwd("C:/xampp/htdocs/workspace/UltimateOptimizer")
res = UltimateOptimizer()
source('C:/xampp/htdocs/workspace/UltimateOptimizer/guiam_project.r')
res = UltimateOptimizer()
res = UltimateOptimizer()
source('C:/xampp/htdocs/workspace/UltimateOptimizer/guiam_project.r')
res = UltimateOptimizer()
source('C:/xampp/htdocs/workspace/UltimateOptimizer/guiam_project.r')
res = UltimateOptimizer()
